// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: greenfield/permission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";
import { UInt64Value } from "./common";
import { ResourceType, resourceTypeFromJSON, resourceTypeToJSON } from "./resource";

export const protobufPackage = "greenfield.permission";

export enum ActionType {
  ACTION_UNSPECIFIED = 0,
  ACTION_UPDATE_BUCKET_INFO = 1,
  ACTION_DELETE_BUCKET = 2,
  ACTION_CREATE_OBJECT = 3,
  ACTION_DELETE_OBJECT = 4,
  ACTION_COPY_OBJECT = 5,
  ACTION_GET_OBJECT = 6,
  ACTION_EXECUTE_OBJECT = 7,
  ACTION_LIST_OBJECT = 8,
  ACTION_UPDATE_GROUP_MEMBER = 9,
  ACTION_DELETE_GROUP = 10,
  ACTION_UPDATE_OBJECT_INFO = 11,
  ACTION_UPDATE_GROUP_EXTRA = 12,
  ACTION_UPDATE_GROUP_INFO = 13,
  ACTION_UPDATE_OBJECT_CONTENT = 14,
  ACTION_TYPE_ALL = 99,
  UNRECOGNIZED = -1,
}

export function actionTypeFromJSON(object: any): ActionType {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return ActionType.ACTION_UNSPECIFIED;
    case 1:
    case "ACTION_UPDATE_BUCKET_INFO":
      return ActionType.ACTION_UPDATE_BUCKET_INFO;
    case 2:
    case "ACTION_DELETE_BUCKET":
      return ActionType.ACTION_DELETE_BUCKET;
    case 3:
    case "ACTION_CREATE_OBJECT":
      return ActionType.ACTION_CREATE_OBJECT;
    case 4:
    case "ACTION_DELETE_OBJECT":
      return ActionType.ACTION_DELETE_OBJECT;
    case 5:
    case "ACTION_COPY_OBJECT":
      return ActionType.ACTION_COPY_OBJECT;
    case 6:
    case "ACTION_GET_OBJECT":
      return ActionType.ACTION_GET_OBJECT;
    case 7:
    case "ACTION_EXECUTE_OBJECT":
      return ActionType.ACTION_EXECUTE_OBJECT;
    case 8:
    case "ACTION_LIST_OBJECT":
      return ActionType.ACTION_LIST_OBJECT;
    case 9:
    case "ACTION_UPDATE_GROUP_MEMBER":
      return ActionType.ACTION_UPDATE_GROUP_MEMBER;
    case 10:
    case "ACTION_DELETE_GROUP":
      return ActionType.ACTION_DELETE_GROUP;
    case 11:
    case "ACTION_UPDATE_OBJECT_INFO":
      return ActionType.ACTION_UPDATE_OBJECT_INFO;
    case 12:
    case "ACTION_UPDATE_GROUP_EXTRA":
      return ActionType.ACTION_UPDATE_GROUP_EXTRA;
    case 13:
    case "ACTION_UPDATE_GROUP_INFO":
      return ActionType.ACTION_UPDATE_GROUP_INFO;
    case 14:
    case "ACTION_UPDATE_OBJECT_CONTENT":
      return ActionType.ACTION_UPDATE_OBJECT_CONTENT;
    case 99:
    case "ACTION_TYPE_ALL":
      return ActionType.ACTION_TYPE_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionType.UNRECOGNIZED;
  }
}

export function actionTypeToJSON(object: ActionType): string {
  switch (object) {
    case ActionType.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case ActionType.ACTION_UPDATE_BUCKET_INFO:
      return "ACTION_UPDATE_BUCKET_INFO";
    case ActionType.ACTION_DELETE_BUCKET:
      return "ACTION_DELETE_BUCKET";
    case ActionType.ACTION_CREATE_OBJECT:
      return "ACTION_CREATE_OBJECT";
    case ActionType.ACTION_DELETE_OBJECT:
      return "ACTION_DELETE_OBJECT";
    case ActionType.ACTION_COPY_OBJECT:
      return "ACTION_COPY_OBJECT";
    case ActionType.ACTION_GET_OBJECT:
      return "ACTION_GET_OBJECT";
    case ActionType.ACTION_EXECUTE_OBJECT:
      return "ACTION_EXECUTE_OBJECT";
    case ActionType.ACTION_LIST_OBJECT:
      return "ACTION_LIST_OBJECT";
    case ActionType.ACTION_UPDATE_GROUP_MEMBER:
      return "ACTION_UPDATE_GROUP_MEMBER";
    case ActionType.ACTION_DELETE_GROUP:
      return "ACTION_DELETE_GROUP";
    case ActionType.ACTION_UPDATE_OBJECT_INFO:
      return "ACTION_UPDATE_OBJECT_INFO";
    case ActionType.ACTION_UPDATE_GROUP_EXTRA:
      return "ACTION_UPDATE_GROUP_EXTRA";
    case ActionType.ACTION_UPDATE_GROUP_INFO:
      return "ACTION_UPDATE_GROUP_INFO";
    case ActionType.ACTION_UPDATE_OBJECT_CONTENT:
      return "ACTION_UPDATE_OBJECT_CONTENT";
    case ActionType.ACTION_TYPE_ALL:
      return "ACTION_TYPE_ALL";
    case ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PrincipalType {
  PRINCIPAL_TYPE_UNSPECIFIED = 0,
  PRINCIPAL_TYPE_GNFD_ACCOUNT = 1,
  PRINCIPAL_TYPE_GNFD_GROUP = 2,
  UNRECOGNIZED = -1,
}

export function principalTypeFromJSON(object: any): PrincipalType {
  switch (object) {
    case 0:
    case "PRINCIPAL_TYPE_UNSPECIFIED":
      return PrincipalType.PRINCIPAL_TYPE_UNSPECIFIED;
    case 1:
    case "PRINCIPAL_TYPE_GNFD_ACCOUNT":
      return PrincipalType.PRINCIPAL_TYPE_GNFD_ACCOUNT;
    case 2:
    case "PRINCIPAL_TYPE_GNFD_GROUP":
      return PrincipalType.PRINCIPAL_TYPE_GNFD_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PrincipalType.UNRECOGNIZED;
  }
}

export function principalTypeToJSON(object: PrincipalType): string {
  switch (object) {
    case PrincipalType.PRINCIPAL_TYPE_UNSPECIFIED:
      return "PRINCIPAL_TYPE_UNSPECIFIED";
    case PrincipalType.PRINCIPAL_TYPE_GNFD_ACCOUNT:
      return "PRINCIPAL_TYPE_GNFD_ACCOUNT";
    case PrincipalType.PRINCIPAL_TYPE_GNFD_GROUP:
      return "PRINCIPAL_TYPE_GNFD_GROUP";
    case PrincipalType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Effect {
  EFFECT_UNSPECIFIED = 0,
  EFFECT_ALLOW = 1,
  EFFECT_DENY = 2,
  UNRECOGNIZED = -1,
}

export function effectFromJSON(object: any): Effect {
  switch (object) {
    case 0:
    case "EFFECT_UNSPECIFIED":
      return Effect.EFFECT_UNSPECIFIED;
    case 1:
    case "EFFECT_ALLOW":
      return Effect.EFFECT_ALLOW;
    case 2:
    case "EFFECT_DENY":
      return Effect.EFFECT_DENY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Effect.UNRECOGNIZED;
  }
}

export function effectToJSON(object: Effect): string {
  switch (object) {
    case Effect.EFFECT_UNSPECIFIED:
      return "EFFECT_UNSPECIFIED";
    case Effect.EFFECT_ALLOW:
      return "EFFECT_ALLOW";
    case Effect.EFFECT_DENY:
      return "EFFECT_DENY";
    case Effect.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Principal {
  type: PrincipalType;
  value: string;
}

export interface Statement {
  effect: Effect;
  actions: ActionType[];
  resources: string[];
  expirationTime: Date | undefined;
  limitSize: UInt64Value | undefined;
}

export interface Policy {
  id: string;
  principal: Principal | undefined;
  resourceType: ResourceType;
  resourceId: string;
  statements: Statement[];
  expirationTime: Date | undefined;
}

function createBasePrincipal(): Principal {
  return { type: 0, value: "" };
}

export const Principal: MessageFns<Principal> = {
  encode(message: Principal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Principal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrincipal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Principal {
    return {
      type: isSet(object.type) ? principalTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Principal): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = principalTypeToJSON(message.type);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Principal>, I>>(base?: I): Principal {
    return Principal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Principal>, I>>(object: I): Principal {
    const message = createBasePrincipal();
    message.type = object.type ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStatement(): Statement {
  return { effect: 0, actions: [], resources: [], expirationTime: undefined, limitSize: undefined };
}

export const Statement: MessageFns<Statement> = {
  encode(message: Statement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.effect !== 0) {
      writer.uint32(8).int32(message.effect);
    }
    writer.uint32(18).fork();
    for (const v of message.actions) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.resources) {
      writer.uint32(26).string(v!);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(34).fork()).join();
    }
    if (message.limitSize !== undefined) {
      UInt64Value.encode(message.limitSize, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Statement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.effect = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.actions.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.actions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resources.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.limitSize = UInt64Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Statement {
    return {
      effect: isSet(object.effect) ? effectFromJSON(object.effect) : 0,
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => actionTypeFromJSON(e)) : [],
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => globalThis.String(e))
        : [],
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
      limitSize: isSet(object.limitSize) ? UInt64Value.fromJSON(object.limitSize) : undefined,
    };
  },

  toJSON(message: Statement): unknown {
    const obj: any = {};
    if (message.effect !== 0) {
      obj.effect = effectToJSON(message.effect);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => actionTypeToJSON(e));
    }
    if (message.resources?.length) {
      obj.resources = message.resources;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    if (message.limitSize !== undefined) {
      obj.limitSize = UInt64Value.toJSON(message.limitSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Statement>, I>>(base?: I): Statement {
    return Statement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Statement>, I>>(object: I): Statement {
    const message = createBaseStatement();
    message.effect = object.effect ?? 0;
    message.actions = object.actions?.map((e) => e) || [];
    message.resources = object.resources?.map((e) => e) || [];
    message.expirationTime = object.expirationTime ?? undefined;
    message.limitSize = (object.limitSize !== undefined && object.limitSize !== null)
      ? UInt64Value.fromPartial(object.limitSize)
      : undefined;
    return message;
  },
};

function createBasePolicy(): Policy {
  return { id: "", principal: undefined, resourceType: 0, resourceId: "", statements: [], expirationTime: undefined };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.principal !== undefined) {
      Principal.encode(message.principal, writer.uint32(18).fork()).join();
    }
    if (message.resourceType !== 0) {
      writer.uint32(24).int32(message.resourceType);
    }
    if (message.resourceId !== "") {
      writer.uint32(34).string(message.resourceId);
    }
    for (const v of message.statements) {
      Statement.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.principal = Principal.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.resourceType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.statements.push(Statement.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      principal: isSet(object.principal) ? Principal.fromJSON(object.principal) : undefined,
      resourceType: isSet(object.resourceType) ? resourceTypeFromJSON(object.resourceType) : 0,
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      statements: globalThis.Array.isArray(object?.statements)
        ? object.statements.map((e: any) => Statement.fromJSON(e))
        : [],
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.principal !== undefined) {
      obj.principal = Principal.toJSON(message.principal);
    }
    if (message.resourceType !== 0) {
      obj.resourceType = resourceTypeToJSON(message.resourceType);
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.statements?.length) {
      obj.statements = message.statements.map((e) => Statement.toJSON(e));
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy>, I>>(base?: I): Policy {
    return Policy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy>, I>>(object: I): Policy {
    const message = createBasePolicy();
    message.id = object.id ?? "";
    message.principal = (object.principal !== undefined && object.principal !== null)
      ? Principal.fromPartial(object.principal)
      : undefined;
    message.resourceType = object.resourceType ?? 0;
    message.resourceId = object.resourceId ?? "";
    message.statements = object.statements?.map((e) => Statement.fromPartial(e)) || [];
    message.expirationTime = object.expirationTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
